Services:
	- UserService
		- Login (Logar n√©, padr√£o, n esquece o jwt, o usu√°rio vai poder logar com o email ou com o EDV)
		- Register (Registrar precisa do name, email, EDV e senha, n√£o pode ter o mesmo email, nem o mesmo usu√°rio, nem o mesmo EDV)

	- SpaceService
		- Create (Criar um space, n√£o podem ter espa√ßos com o mesmo nome)
		- Delete (Deletar um space)

	- PermissionService
		- ChangePermission (Coloca um enum no front para exibir duas op√ß√µes: Admin ou common, pq dai o usu√°rio n√£o pode fazer merda e escrever batata na permiss√£o)

	- QuestionsService
		- Create (Criar uma pergunta nova, precisa do nome do space)

	- AnswerService
		- Create (Cria uma resposta, precisa do id da question)

Repositories:
	- UserRepository
		- FindByEmail
		- FindbyEDV
		- FindByName
		- FindByEmailOrEDV (Query j√° pronta, s√≥ usa e seja feliz)

	- SpaceRepository
		- FindByName

	- AnswerRepository
		- getAnswerByQuestion(Pega todas as respostas de uma pergunta, precisa mandar o id da pergunta)



Testes:
	-TestPassword(se a senha tem no min 12 caracteres, tem letras mai√∫sculas e min√∫sculas e n√∫meros)
	- TestEmail(se o email tem formato de email, ex: aaaa@email.com)
	- TestEDV(Opcional na vdd, s√≥ pra conferir se o EDV √© s√≥ n√∫meros, mas se quiser testar isso direto na implementa√ß√£o mesmo)


JWT:
	Querida pessoa que for usar esse pc para implementar a parte do JWT, eu tive um problema com a biblioteca que o Trevis passou como exemplo, por algum motivo,
	ela n√£o estava rodando nesse computador, ent√£o decidi usar a biblioteca Auth0, a l√≥gica dos c√≥digos √© bem parecida, mas para facilitar, eu vou colocar 
	o c√≥digo de como criar o JWT e como validar ele, e tamb√©m um c√≥digo de como usar as fun√ß√µes, o c√≥digo de criar est√° todo comentado para facilitar o seu entendimento.
	Bom trabalho! üòÄ

	==========C√≥digo de criar e validar==========

	package com.example.demo;

	import java.util.Date;

	import com.auth0.jwt.JWT;
	import com.auth0.jwt.algorithms.Algorithm;
	import com.auth0.jwt.exceptions.JWTVerificationException;
	import com.auth0.jwt.interfaces.DecodedJWT;
	import com.auth0.jwt.interfaces.JWTVerifier;

	public class JwtCreate {

		private static final String SECRET_KEY = "minha-chave-secreta-super-segura-muito-segura-aaaa"; //  Chave usada para gerar e validar a assinatura do token, geralmente √© mais forte que essa, mas n√©, n estamos afim

		// Cria um token com um algoritmo HMAC256
		public String generateToken(Long id, String username) {
			Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY); // Define o algoritmo e a chave secreta

			return JWT.create()
					.withSubject(username) // Define o identificador, nesse caso o username
					.withClaim("id", id)
					.withIssuedAt(new Date()) // Define a data que o token foi criado
					.withExpiresAt(new Date(System.currentTimeMillis() + 86400000)) // Define a data de expira√ß√£o do tokenpara 24 horas ap√≥s a cria√ß√£o dele
					.sign(algorithm); // Assina o token e retorna o JWT completo
		}

		// Valida o token verificando a assinatura e a validade do token JWT, se estiver correto, o token ser√° decodificado e suas claims ser√£o retornadas, se ele for inv√°lido, ele retorna null
		public static DecodedJWT validateToken(String token) throws JWTVerificationException {
			Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY); // Configura o verificador com o mesmo algoritmo e chave usados antes

			JWTVerifier verifier = JWT.require(algorithm) 
					.build();

			return verifier.verify(token); // Verifica o token, se certificando de que ele foi gerado com a mesma chave e que ainda est√° v√°lido.
			
		}
	}

	==========================================


	==============C√≥digo de uso===============

	package com.example.demo.interceptor;

	import org.springframework.web.servlet.HandlerInterceptor;

	import com.auth0.jwt.exceptions.JWTVerificationException;
	import com.example.demo.JwtExample;

	import jakarta.servlet.http.HttpServletRequest;
	import jakarta.servlet.http.HttpServletResponse;

	public class JwtInterceptor implements HandlerInterceptor {
		@Override
		public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
			var authorization = request.getHeader("Authorization"); // Pega a autoriza√ß√£o da Header
			
			if (authorization == null || !authorization.startsWith("Bearer")) { // Confere se a autoriza√ß√£o est√° nula ou se n√£o come√ßa com Bearer
				response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				response.getWriter().write("Unauthorized!");

				return false;
			}

			authorization = authorization // Se passar do √∫ltimo if, ele tira o Bearer tira espa√ßos das extremidades da String
								.replace("Bearer", "")
								.trim();

			try {
				var decoded = JwtExample.validateToken(authorization); // Chama a fun√ß√£o validateToken

				request.setAttribute("username", decoded.getSubject()); // Pega o username do dono do token
				request.setAttribute("id", decoded.getClaim("id")); // Pega o claim ID, mas pode ser qualquer outro que voc√™ quiser colocar
				
				return true; // Retorna true pra falar que deu certo a opera√ß√£o
			} catch (JWTVerificationException e) { // Se der erro, ele da o erro de n√£o autorizado e retorna false
				response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				response.getWriter().write("Unauthorized!");

				return false;
			}
		}

	}

	==========================================


	√â isso! Qualquer d√∫vida, por favor me chame. Ass: Sas√° ü•∞
